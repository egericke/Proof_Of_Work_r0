name: Daily Habit Tweet

on:
  schedule:
    # Runs daily at 1:30 AM UTC (9:30 PM EST the previous day with TZ=America/New_York)
    - cron: '30 1 * * *'
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: read # Read access to checkout the code

jobs:
  tweet_habit_status:
    runs-on: ubuntu-latest
    env:
      # Needed for Next.js build/run
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_KEY }}

      # Twitter API Credentials
      TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
      TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
      TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
      TWITTER_ACCESS_SECRET: ${{ secrets.TWITTER_ACCESS_SECRET }}

      # Set NODE_ENV for Next.js build (standard practice)
      NODE_ENV: production
      # Set Timezone for Tweet Timestamp
      TZ: America/New_York # New York Timezone (EST/EDT)

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Verify Twitter environment variables
        run: |
          echo "Verifying Twitter env vars..."
          if [ -z "$TWITTER_API_KEY" ] || [ -z "$TWITTER_API_SECRET" ] || [ -z "$TWITTER_ACCESS_TOKEN" ] || [ -z "$TWITTER_ACCESS_SECRET" ]; then
            echo "::error::Required Twitter environment variables missing! Cannot post tweet."
            exit 1
          fi
          echo "Twitter env vars verified."

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # Cache npm packages globally
          cache: 'npm'
          # Specify lock file path for cache key generation (check if it exists first)
          cache-dependency-path: 'web/package-lock.json'

      - name: Verify package-lock.json exists # ADDED STEP
        id: check_lockfile
        run: |
          if [ -f "web/package-lock.json" ]; then
            echo "web/package-lock.json found."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "::warning::web/package-lock.json not found!"
            echo "exists=false" >> <span class="math-inline">GITHUB\_OUTPUT
fi
\- name\: Install Puppeteer system dependencies
run\: \|
echo "Installing Puppeteer system dependencies for Ubuntu\.\.\."
sudo apt\-get update \-qq && sudo apt\-get install \-y \-\-no\-install\-recommends \-\-fix\-missing \\
ca\-certificates fonts\-liberation libasound2t64 libatk\-bridge2\.0\-0t64 libatk1\.0\-0t64 \\
libc6 libcairo2 libcups2t64 libdbus\-1\-3 libexpat1 libfontconfig1 libgbm1 libgcc\-s1 \\
libgdk\-pixbuf\-2\.0\-0 libglib2\.0\-0t64 libgtk\-3\-0 libnspr4 libnss3 libpango\-1\.0\-0 \\
libpangocairo\-1\.0\-0 libstdc\+\+6 libx11\-6 libx11\-xcb1 libxcb1 libxcomposite1 libxcursor1 \\
libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 \\
lsb\-release wget xdg\-utils \|\| \{ echo "\:\:error\:\:Failed to install system dependencies"; exit 1; \}
echo "System dependencies installed\."
\- name\: Install web dependencies
working\-directory\: \./web
run\: \|
echo "Installing web dependencies using npm ci or npm install\.\.\."
\# Use output from previous step to decide install method
if \[ "</span>{{ steps.check_lockfile.outputs.exists }}" == "true" ]; then
            # Use npm ci for faster, reliable builds based on lock file
            # REMOVED --loglevel error to see full npm output on failure
            npm ci || { echo "::error::npm ci failed in ./web"; exit 1; }
          else
            echo "package-lock.json not found in ./web, running npm install"
            # REMOVED --loglevel error to see full npm output on failure
            npm install || { echo "::error::npm install failed in ./web"; exit 1; }
          fi
          echo "Web dependencies installation attempt complete."

      - name: DEBUG - Show web node_modules contents (optional)
        # This will only run if the 'Install web dependencies' step fails
        if: failure()
        working-directory: ./web
        run: |
          echo "--- Listing ./web contents after failed install ---"
          ls -la
          echo "--- Listing web/node_modules contents (if any) ---"
          ls -la node_modules | head -n 20 || echo "node_modules directory not found or empty"
          echo "--- Checking for tailwindcss ---"
          ls -la node_modules/tailwindcss || echo "tailwindcss directory not found"
          echo "--- Checking for postcss ---"
          ls -la node_modules/postcss || echo "postcss directory not found"

      - name: Install screenshot script dependencies
        working-directory: ./scripts
        run: |
          echo "Installing screenshot script dependencies..."
          if [ -f package.json ]; then
            npm install || { echo "::error::npm install failed in ./scripts"; exit 1; }
            npm list puppeteer || npm install puppeteer@^23.5.0 --no-save || { echo "::error::Failed to install Puppeteer in ./scripts"; exit 1; }
          else
             echo "No package.json in ./scripts, attempting direct puppeteer install"
             npm install puppeteer@^23.5.0 --no-save || { echo "::error::Failed to install Puppeteer directly in ./scripts"; exit 1; }
          fi
          echo "Screenshot dependencies installed."

      - name: Build Next.js app
        working-directory: ./web
        run: |
          echo "Building Next.js app..."
          npm run build || { echo "::error::Next.js build failed"; exit 1; }
          echo "Next.js app built."

      - name: Start Next.js server locally
        working-directory: ./web
        run: |
          echo "Starting Next.js server in background..."
          npm run start > ../server.log 2>&1 &
          SERVER_PID=$!
