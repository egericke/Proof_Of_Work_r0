name: Daily Habit Tweet

on:
  schedule:
    # Runs daily at 1:30 AM UTC (9:30 PM EST the previous day with TZ=America/New_York)
    - cron: '30 1 * * *'
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: read # Read access to checkout the code

jobs:
  tweet_habit_status:
    runs-on: ubuntu-latest
    env:
      # Needed for Next.js build/run
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_KEY }}

      # Twitter API Credentials
      TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
      TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
      TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
      TWITTER_ACCESS_SECRET: ${{ secrets.TWITTER_ACCESS_SECRET }}

      # Set NODE_ENV for Next.js build (standard practice)
      NODE_ENV: production
      # Set Timezone for Tweet Timestamp
      TZ: America/New_York # New York Timezone (EST/EDT)

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Verify Twitter environment variables
        run: |
          echo "Verifying Twitter env vars..."
          if [ -z "$TWITTER_API_KEY" ] || [ -z "$TWITTER_API_SECRET" ] || [ -z "$TWITTER_ACCESS_TOKEN" ] || [ -z "$TWITTER_ACCESS_SECRET" ]; then
            echo "::error::Required Twitter environment variables missing! Cannot post tweet."
            exit 1
          fi
          echo "Twitter env vars verified."

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # Cache npm packages globally, key based on the committed lock file
          cache: 'npm'
          cache-dependency-path: 'web/package-lock.json' # This should now work

      - name: Install Puppeteer system dependencies
        run: |
          echo "Installing Puppeteer system dependencies for Ubuntu..."
          sudo apt-get update -qq && sudo apt-get install -y --no-install-recommends --fix-missing \
            ca-certificates fonts-liberation libasound2t64 libatk-bridge2.0-0t64 libatk1.0-0t64 \
            libc6 libcairo2 libcups2t64 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc-s1 \
            libgdk-pixbuf-2.0-0 libglib2.0-0t64 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 \
            libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 \
            libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 \
            lsb-release wget xdg-utils || { echo "::error::Failed to install system dependencies"; exit 1; }
          echo "System dependencies installed."

      - name: Install web dependencies
        working-directory: ./web
        run: |
          echo "Installing web dependencies using npm ci..."
          # Use npm ci now that package-lock.json is committed
          # Keep verbose logging for now to catch any other potential errors
          npm ci || { echo "::error::npm ci failed in ./web"; exit 1; }
          echo "Web dependencies installation complete."

      # Keep the debug step for one more run, just in case install fails again
      - name: DEBUG - Show web node_modules contents (optional)
        if: failure()
        working-directory: ./web
        run: |
          echo "--- Listing ./web contents after failed install ---"
          ls -la
          echo "--- Listing web/node_modules contents (if any) ---"
          ls -la node_modules | head -n 20 || echo "node_modules directory not found or empty"
          echo "--- Checking for tailwindcss ---"
          ls -la node_modules/tailwindcss || echo "tailwindcss directory not found"
          echo "--- Checking for postcss ---"
          ls -la node_modules/postcss || echo "postcss directory not found"

      - name: Install screenshot script dependencies
        working-directory: ./scripts
        run: |
          echo "Installing screenshot script dependencies..."
          if [ -f package.json ]; then
            # Assuming scripts might also benefit from ci if lock file exists
            if [ -f package-lock.json ]; then
                npm ci || { echo "::error::npm ci failed in ./scripts"; exit 1; }
            else
                npm install || { echo "::error::npm install failed in ./scripts"; exit 1; }
            fi
            # Ensure puppeteer is installed
            npm list puppeteer || npm install puppeteer@^23.5.0 --no-save || { echo "::error::Failed to install Puppeteer in ./scripts"; exit 1; }
          else
             echo "No package.json in ./scripts, attempting direct puppeteer install"
             npm install puppeteer@^23.5.0 --no-save || { echo "::error::Failed to install Puppeteer directly in ./scripts"; exit 1; }
          fi
          echo "Screenshot dependencies installed."

      - name: Build Next.js app
        working-directory: ./web
        run: |
          echo "Building Next.js app..."
          npm run build || { echo "::error::Next.js build failed"; exit 1; }
          echo "Next.js app built."

      - name: Start Next.js server locally
        working-directory: ./web
        run: |
          echo "Starting Next.js server in background..."
          npm run start > ../server.log 2>&1 &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          echo "Server started with PID: $SERVER_PID"
          if [ -z "$SERVER_PID" ]; then
            echo "::error::Failed to capture server PID!"
            cat ../server.log
            exit 1
          fi

      - name: Wait for server to become ready
        run: |
          echo "Waiting up to 60 seconds for server to start..."
          n=0
          until [ $n -ge 6 ]; do
             if ! kill -0 ${{ env.SERVER_PID }} >/dev/null 2>&1; then
               echo "::error::Server process ${{ env.SERVER_PID }} stopped unexpectedly during startup!"
               cat server.log
               exit 1
             fi
             curl --fail --max-time 5 --silent --output /dev/null http://localhost:3000/habits && break
             echo "Server not ready yet (attempt $((n+1)))..."
             n=$((n+1))
             sleep 10
          done
          if [ $n -ge 6 ]; then
             echo "::error::Server did not become ready on http://localhost:3000/habits after 60s!"
             cat server.log
             kill ${{ env.SERVER_PID }} 2>/dev/null || echo "Server process could not be killed."
             exit 1
          fi
          echo "Server is ready."

      - name: Take screenshot of Habits page
        run: |
          echo "Taking screenshot..."
          node scripts/screenshot_habits.js || { echo "::error::Screenshot script failed"; exit 1; }
          echo "Screenshot taken."

      - name: Stop Next.js server
        if: always()
        run: |
          if [ -n "${{ env.SERVER_PID }}" ]; then
            echo "Stopping server with PID ${{ env.SERVER_PID }}..."
            kill -TERM ${{ env.SERVER_PID }} 2>/dev/null
            sleep 5
            kill -KILL ${{ env.SERVER_PID }} 2>/dev/null || echo "Server process ${{ env.SERVER_PID }} stopped or not found."
          else
            echo "SERVER_PID was not set, cannot kill server."
          fi

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          echo "Installing Python dependencies..."
          python -m pip install --upgrade pip
          pip install -r requirements.txt || { echo "::error::Failed to install Python dependencies"; exit 1; }
          echo "Python dependencies installed."

      - name: Generate Tweet Message
        id: tweet_msg
        run: |
          current_datetime=$(date +'%Y-%m-%d %H:%M:%S %Z')
          echo "Generated message time: $current_datetime"
          tweet_text="$current_datetime - Proof of Work"
          echo "TWEET_MESSAGE=${tweet_text}" >> $GITHUB_ENV

      - name: Post Habits Screenshot to Twitter
        run: |
          echo "Posting to Twitter..."
          python scripts/post_to_social.py --twitter scripts/habit_screenshot.png "$TWEET_MESSAGE" || { echo "::error::Twitter post failed"; exit 1; }
          echo "Tweet posted."

      - name: Upload debug logs and screenshot
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: habit-tweet-logs-${{ github.run_id }}
          path: |
            scripts/habit_screenshot.png
            scripts/debug_screenshot_error.png
            scripts/*.log
            server.log
          if-no-files-found: ignore
