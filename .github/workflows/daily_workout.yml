name: Daily Data Fetch
on:
  schedule:
    - cron: '0 1 * * *'  # Runs daily at 1 AM UTC
  workflow_dispatch:     # Allows manual triggering
permissions:
  contents: write  # Grants write access for gh-pages deployment
jobs:
  daily:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_DB_HOST: ${{ secrets.SUPABASE_DB_HOST }}
      SUPABASE_DB_PORT: ${{ secrets.SUPABASE_DB_PORT }}
      SUPABASE_DB_NAME: ${{ secrets.SUPABASE_DB_NAME }}
      SUPABASE_DB_USER: ${{ secrets.SUPABASE_DB_USER }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      GARMIN_USERNAME: ${{ secrets.GARMIN_USERNAME }}
      GARMIN_PASSWORD: ${{ secrets.GARMIN_PASSWORD }}
      STRAVA_CLIENT_ID: ${{ secrets.STRAVA_CLIENT_ID }}
      STRAVA_CLIENT_SECRET: ${{ secrets.STRAVA_CLIENT_SECRET }}
      STRAVA_REFRESH_TOKEN: ${{ secrets.STRAVA_REFRESH_TOKEN }}
      TOGGL_API_KEY: ${{ secrets.TOGGL_API_KEY }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Verify environment variables
        run: |
          echo "NEXT_PUBLIC_SUPABASE_URL=$NEXT_PUBLIC_SUPABASE_URL"
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY:0:4}..."
          echo "Checking environment variables:"
          echo "SUPABASE_URL=$SUPABASE_URL"
          echo "SUPABASE_KEY=${SUPABASE_KEY:0:4}..."
          echo "SUPABASE_DB_HOST=$SUPABASE_DB_HOST"
          echo "SUPABASE_DB_PORT=$SUPABASE_DB_PORT"
          echo "SUPABASE_DB_NAME=$SUPABASE_DB_NAME"
          echo "SUPABASE_DB_USER=$SUPABASE_DB_USER"
          echo "SUPABASE_DB_PASSWORD=${SUPABASE_DB_PASSWORD:0:4}..."
          echo "GARMIN_USERNAME=$GARMIN_USERNAME"
          echo "GARMIN_PASSWORD=${GARMIN_PASSWORD:0:4}..."
          echo "STRAVA_CLIENT_ID=$STRAVA_CLIENT_ID"
          echo "STRAVA_CLIENT_SECRET=${STRAVA_CLIENT_SECRET:0:4}..."
          echo "STRAVA_REFRESH_TOKEN=${STRAVA_REFRESH_TOKEN:0:4}..."
          echo "TOGGL_API_KEY=${TOGGL_API_KEY:0:4}..."
          if [ -z "$TOGGL_API_KEY" ] || [ -z "$SUPABASE_KEY" ]; then
            echo "::error::TOGGL_API_KEY or SUPABASE_KEY is not set or empty. Please check repository secrets."
            exit 1
          fi
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
          pip show supabase
      - name: Run Python script
        run: python -m scripts.main
        continue-on-error: false
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install Node dependencies
        run: |
          cd web
          npm install
          npm install chart.js@^4.4.1 react-chartjs-2@^5.2.0
      - name: Create necessary utility files
        run: |
          # Create supabaseClient.js utility
          mkdir -p web/utils
          cat > web/utils/supabaseClient.js << 'EOL'
          // web/utils/supabaseClient.js
          import { createClient } from '@supabase/supabase-js';

          export const getSupabaseClient = () => {
            // This function should only run on the client side
            if (typeof window === 'undefined') {
              return null;
            }
            
            const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
            const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
            
            if (!supabaseUrl || !supabaseAnonKey) {
              console.error('Supabase credentials missing - check your environment variables');
              return null;
            }
            
            try {
              return createClient(supabaseUrl, supabaseAnonKey);
            } catch (error) {
              console.error('Error creating Supabase client:', error);
              return null;
            }
          };
          EOL

          # Update next.config.js for static export
          cat > web/next.config.js << 'EOL'
          /** @type {import('next').NextConfig} */
          const nextConfig = {
            reactStrictMode: true,
            output: 'export',
            images: { unoptimized: true },
            // Add trailing slashes to URLs
            trailingSlash: true,
          };

          module.exports = nextConfig;
          EOL
      - name: Fix component files for client-side Supabase
        run: |
          # Fix OverviewPanel.js
          mkdir -p web/components/panels
          cat > web/components/panels/OverviewPanel.js << 'EOL'
          // web/components/panels/OverviewPanel.js
          import { useState, useEffect } from 'react';
          import StatsCard from '../ui/StatsCard';
          import DataChart from '../ui/DataChart';
          import QuoteCard from '../ui/QuoteCard';
          import ActivityFeed from '../ui/ActivityFeed';
          import { getSupabaseClient } from '../../utils/supabaseClient';

          // Fallback data for VO2Max
          const fallbackVo2Max = { value: 42.5, trend: 1.5 };
          
          // Fallback data for activities
          const fallbackActivities = [
            { type: 'workout', title: 'Morning Run', date: '2023-01-10', value: '5.20 km' },
            { type: 'focus', title: 'Deep Work', date: '2023-01-09', value: '4.5 hrs' },
            { type: 'habit', title: 'Daily Habits', date: '2023-01-10', value: '4/5 complete' }
          ];

          export default function OverviewPanel({ dateRange }) {
            const [stats, setStats] = useState({
              vo2Max: { value: 0, trend: 0 },
              workouts: { value: 0, trend: 0 },
              focusHours: { value: 0, trend: 0 },
              habitStreak: { value: 0, trend: 0 }
            });
            const [activityData, setActivityData] = useState({
              labels: [],
              datasets: []
            });
            const [recentActivities, setRecentActivities] = useState([]);
            const [isLoading, setIsLoading] = useState(true);

            // Format dates for data fetching
            const formatDateParam = (date) => {
              return date.toISOString().split('T')[0];
            };

            // Fetch data directly from Supabase
            useEffect(() => {
              async function fetchData() {
                setIsLoading(true);
                
                try {
                  const startDateStr = formatDateParam(dateRange.startDate);
                  const endDateStr = formatDateParam(dateRange.endDate);
                  
                  const supabase = getSupabaseClient();
                  
                  // Use default/fallback values
                  let vo2MaxValue = fallbackVo2Max.value;
                  let vo2MaxTrend = fallbackVo2Max.trend;
                  let workoutCount = 0;
                  let deepWorkHours = 0;
                  let habitStreakCount = 0;
                  let recentItems = [...fallbackActivities];
                  
                  if (supabase) {
                    // Fetch VO2 Max data
                    const { data: vo2MaxData } = await supabase
                      .from('vo2max_tests')
                      .select('*')
                      .order('test_date', { ascending: false })
                      .limit(1);
                      
                    if (vo2MaxData && vo2MaxData.length > 0) {
                      vo2MaxValue = vo2MaxData[0].vo2max_value;
                    }
                    
                    // Fetch workout data
                    const { data: workoutsData } = await supabase
                      .from('workout_stats')
                      .select('*')
                      .gte('date', startDateStr)
                      .lte('date', endDateStr);
                      
                    if (workoutsData) {
                      workoutCount = workoutsData.length;
                      
                      // Prepare workout activities
                      const workoutActivities = workoutsData.slice(0, 3).map(workout => ({
                        type: 'workout',
                        title: workout.title || workout.activity_type,
                        date: new Date(workout.date).toLocaleDateString(),
                        value: `${(workout.distance / 1000).toFixed(2)} km`
                      }));
                      
                      // Add to recent activities
                      if (workoutActivities.length > 0) {
                        recentItems = [...workoutActivities, ...recentItems.slice(0, 3 - workoutActivities.length)];
                      }
                    }
                    
                    // Fetch toggl data
                    const { data: togglData } = await supabase
                      .from('toggl_time')
                      .select('*')
                      .gte('date', startDateStr)
                      .lte('date', endDateStr);
                      
                    if (togglData) {
                      deepWorkHours = togglData
                        .filter(entry => entry.bucket === 'Deep Work')
                        .reduce((sum, entry) => sum + entry.hours, 0);
                    }
                    
                    // Fetch habits data
                    const { data: habitsData } = await supabase
                      .from('habit_tracking')
                      .select('*')
                      .gte('habit_date', startDateStr)
                      .lte('habit_date', endDateStr);
                      
                    if (habitsData) {
                      // Group habits by date
                      const habitsByDate = {};
                      habitsData.forEach(habit => {
                        if (!habitsByDate[habit.habit_date]) {
                          habitsByDate[habit.habit_date] = {
                            total: 0, 
                            completed: 0
                          };
                        }
                        
                        habitsByDate[habit.habit_date].total++;
                        if (habit.completed) {
                          habitsByDate[habit.habit_date].completed++;
                        }
                      });
                      
                      // Count dates with 80%+ completion
                      habitStreakCount = Object.keys(habitsByDate).filter(date => {
                        const dayData = habitsByDate[date];
                        return dayData.completed / dayData.total >= 0.8;
                      }).length;
                    }
                  }
                  
                  // Prepare chart data
                  const chartLabels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
                  const chartData = {
                    labels: chartLabels,
                    datasets: [
                      {
                        label: 'Workouts',
                        data: [1, 0, 1, 1, 0, 1, 0],
                        borderColor: 'rgba(66, 153, 225, 0.8)',
                        backgroundColor: 'rgba(66, 153, 225, 0.2)',
                        yAxisID: 'y-axis-1',
                      },
                      {
                        label: 'Focus Hours',
                        data: [4.5, 5.2, 3.8, 6.1, 4.3, 1.5, 0.8],
                        borderColor: 'rgba(236, 72, 153, 0.8)',
                        backgroundColor: 'rgba(236, 72, 153, 0.2)',
                        yAxisID: 'y-axis-2',
                      }
                    ]
                  };
                  
                  // Update state with all fetched data
                  setStats({
                    vo2Max: { 
                      value: vo2MaxValue,
                      trend: vo2MaxTrend
                    },
                    workouts: { 
                      value: workoutCount,
                      trend: 0
                    },
                    focusHours: { 
                      value: deepWorkHours.toFixed(1),
                      trend: 0
                    },
                    habitStreak: { 
                      value: habitStreakCount,
                      trend: 0
                    }
                  });
                  
                  setActivityData(chartData);
                  setRecentActivities(recentItems);
                  
                } catch (error) {
                  console.error('Error fetching dashboard data:', error);
                  // Use fallback data on error
                  setRecentActivities(fallbackActivities);
                } finally {
                  setIsLoading(false);
                }
              }

              fetchData();
            }, [dateRange]);

            return (
              <div className="space-y-6">
                <h2 className="text-2xl font-orbitron text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-500">
                  Dashboard Overview
                </h2>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                  <StatsCard 
                    title="VO₂ Max" 
                    value={stats.vo2Max.value} 
                    unit="ml/kg/min" 
                    trend={stats.vo2Max.trend} 
                    icon="heart" 
                    isLoading={isLoading}
                    color="purple"
                  />
                  <StatsCard 
                    title="Workouts" 
                    value={stats.workouts.value} 
                    unit="sessions" 
                    trend={stats.workouts.trend} 
                    icon="activity" 
                    isLoading={isLoading}
                    color="blue"
                  />
                  <StatsCard 
                    title="Focus Time" 
                    value={stats.focusHours.value} 
                    unit="hours" 
                    trend={stats.focusHours.trend} 
                    icon="clock" 
                    isLoading={isLoading}
                    color="green"
                  />
                  <StatsCard 
                    title="Habit Streak" 
                    value={stats.habitStreak.value} 
                    unit="days" 
                    trend={stats.habitStreak.trend} 
                    icon="check-circle" 
                    isLoading={isLoading}
                    color="amber"
                  />
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                  <div className="lg:col-span-2 bg-gray-800 bg-opacity-60 rounded-lg border border-blue-500/20 p-4 backdrop-blur-sm">
                    <h3 className="text-lg font-medium text-blue-300 mb-4">Weekly Activity</h3>
                    <DataChart 
                      data={activityData} 
                      type="line" 
                      height={300} 
                      isLoading={isLoading}
                      options={{
                        scales: {
                          'y-axis-1': {
                            type: 'linear',
                            position: 'left',
                            title: {
                              display: true,
                              text: 'Workouts'
                            },
                            suggestedMin: 0,
                            suggestedMax: 2,
                            ticks: {
                              stepSize: 1
                            }
                          },
                          'y-axis-2': {
                            type: 'linear',
                            position: 'right',
                            title: {
                              display: true,
                              text: 'Hours'
                            },
                            suggestedMin: 0,
                            grid: {
                              drawOnChartArea: false
                            }
                          }
                        }
