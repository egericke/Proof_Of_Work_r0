name: Daily Data Fetch

on:
  schedule:
    - cron: '0 1 * * *'  # Runs daily at 1 AM UTC
  workflow_dispatch:     # Allows manual triggering

jobs:
  daily:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_DB_HOST: ${{ secrets.SUPABASE_DB_HOST }}
      SUPABASE_DB_PORT: ${{ secrets.SUPABASE_DB_PORT }}
      SUPABASE_DB_NAME: ${{ secrets.SUPABASE_DB_NAME }}
      SUPABASE_DB_USER: ${{ secrets.SUPABASE_DB_USER }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      GARMIN_USERNAME: ${{ secrets.GARMIN_USERNAME }}
      GARMIN_PASSWORD: ${{ secrets.GARMIN_PASSWORD }}
      STRAVA_CLIENT_ID: ${{ secrets.STRAVA_CLIENT_ID }}
      STRAVA_CLIENT_SECRET: ${{ secrets.STRAVA_CLIENT_SECRET }}
      STRAVA_REFRESH_TOKEN: ${{ secrets.STRAVA_REFRESH_TOKEN }}
      TOGGL_API_KEY: ${{ secrets.TOGGL_API_KEY }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Verify environment variables
        run: |
          echo "Checking environment variables:"
          [ -n "$NEXT_PUBLIC_SUPABASE_URL" ] && echo "NEXT_PUBLIC_SUPABASE_URL is set" || echo "NEXT_PUBLIC_SUPABASE_URL is not set"
          [ -n "$NEXT_PUBLIC_SUPABASE_ANON_KEY" ] && echo "NEXT_PUBLIC_SUPABASE_ANON_KEY is set" || echo "NEXT_PUBLIC_SUPABASE_ANON_KEY is not set"
          [ -n "$SUPABASE_URL" ] && echo "SUPABASE_URL is set" || echo "SUPABASE_URL is not set"
          [ -n "$SUPABASE_KEY" ] && echo "SUPABASE_KEY is set" || echo "SUPABASE_KEY is not set"
          [ -n "$SUPABASE_DB_HOST" ] && echo "SUPABASE_DB_HOST is set" || echo "SUPABASE_DB_HOST is not set"
          [ -n "$SUPABASE_DB_PORT" ] && echo "SUPABASE_DB_PORT is set" || echo "SUPABASE_DB_PORT is not set"
          [ -n "$SUPABASE_DB_NAME" ] && echo "SUPABASE_DB_NAME is set" || echo "SUPABASE_DB_NAME is not set"
          [ -n "$SUPABASE_DB_USER" ] && echo "SUPABASE_DB_USER is set" || echo "SUPABASE_DB_USER is not set"
          [ -n "$SUPABASE_DB_PASSWORD" ] && echo "SUPABASE_DB_PASSWORD is set" || echo "SUPABASE_DB_PASSWORD is not set"
          [ -n "$GARMIN_USERNAME" ] && echo "GARMIN_USERNAME is set" || echo "GARMIN_USERNAME is not set"
          [ -n "$GARMIN_PASSWORD" ] && echo "GARMIN_PASSWORD is set" || echo "GARMIN_PASSWORD is not set"
          [ -n "$STRAVA_CLIENT_ID" ] && echo "STRAVA_CLIENT_ID is set" || echo "STRAVA_CLIENT_ID is not set"
          [ -n "$STRAVA_CLIENT_SECRET" ] && echo "STRAVA_CLIENT_SECRET is set" || echo "STRAVA_CLIENT_SECRET is not set"
          [ -n "$STRAVA_REFRESH_TOKEN" ] && echo "STRAVA_REFRESH_TOKEN is set" || echo "STRAVA_REFRESH_TOKEN is not set"
          [ -n "$TOGGL_API_KEY" ] && echo "TOGGL_API_KEY is set" || echo "TOGGL_API_KEY is not set"
          if [ -z "$TOGGL_API_KEY" ] || [ -z "$SUPABASE_KEY" ]; then
            echo "::error::TOGGL_API_KEY or SUPABASE_KEY is not set or empty. Please check repository secrets."
            exit 1
          fi

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
          pip show supabase  # Verify supabase is installed

      - name: Run Python script
        run: python -m scripts.main
        continue-on-error: false  # Ensure the workflow fails if the script fails

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Node dependencies
        run: |
          cd web
          npm install

      - name: Build Next.js app
        run: |
          cd web
          npm run build

      - name: Deploy to GitHub Pages
        uses: actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./web/out

      - name: Upload debug logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs
          path: '*.log'
          if-no-files-found: ignore
